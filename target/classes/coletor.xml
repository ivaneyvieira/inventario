<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<configuration xmlns="http://www.jooq.org/xsd/jooq-codegen-2.0.4.xsd">
	<!-- Configure the database connection here -->
	<jdbc>
		<driver>com.mysql.jdbc.Driver</driver>
		<url>jdbc:mysql://192.86.221.11:3306/coletor</url>
		<user>pintos</user>
		<password>pintos</password>
	</jdbc>

	<generator>
		<!-- The default code generator. You can override this one, to generate 
			your own code style Defaults to org.jooq.util.DefaultGenerator -->
		<name>org.jooq.util.DefaultGenerator</name>

		<database>
		    <!-- All table and view columns that are used as "version" fields for
                 optimistic locking (several Java regular expressions, separated by comma).
                 See UpdatableRecord.store() and UpdatableRecord.delete() for details -->
            <recordVersionFields>VERSION</recordVersionFields>
			<!-- The database type. The format here is: org.util.[database].[database]Database -->
			<name>org.jooq.util.mysql.MySQLDatabase</name>

			<!-- The database schema (or in the absence of schema support, in your 
				RDBMS this can be the owner, user, database name) to be generated -->
			<inputSchema>coletor</inputSchema>

			<!-- All elements that are generated from your schema (several Java regular 
				expressions, separated by comma) Watch out for case-sensitivity. Depending 
				on your database, this might be important! -->
			<includes>.*</includes>

			<!-- All elements that are excluded from your schema (several Java regular 
				expressions, separated by comma). Excludes match before includes -->
			<excludes></excludes>
		</database>

		<!-- These properties can be added to the generate element: -->
		<generate>
			<!-- Primary key / foreign key relations should be generated and used. 
				This is a prerequisite for various advanced features. Defaults to true -->
			<relations>true</relations>

			<!-- Generate navigation methods to navigate foreign key relationships 
				directly from Record classes. This is only relevant if relations is set to 
				true, too. Defaults to true -->
			<navigationMethods>true</navigationMethods>

			<!-- Generate deprecated code for backwards compatibility Defaults to 
				true -->
			<deprecated>false</deprecated>

			<!-- Generate instance fields in your tables, as opposed to static fields. 
				This simplifies aliasing. Defaults to true -->
			<instanceFields>true</instanceFields>

			<!-- Generate the javax.annotation.Generated annotation to indicate jOOQ 
				version used for source code. Defaults to true -->
			<generatedAnnotation>true</generatedAnnotation>

			<!-- Generate jOOQ Record classes for type-safe querying. You can turn 
				this off, if you don't need "active records" for CRUD Defaults to true -->
			<records>true</records>

			<!-- Generate POJOs in addition to Record classes for usage of the ResultQuery.fetchInto(Class) 
				API Defaults to false -->
			<pojos>true</pojos>

			<!-- Generate immutable POJOs for usage of the ResultQuery.fetchInto(Class) 
				API This overrides any value set in <pojos/> Defaults to false -->
			<immutablePojos>false</immutablePojos>

			<!-- Generate interfaces that will be implemented by records and/or pojos. 
				You can also use these interfaces in Record.into(Class<?>) and similar methods, 
				to let jOOQ return proxy objects for them. Defaults to false -->
			<interfaces>true</interfaces>

			<!-- Generate DAOs in addition to POJO classes Defaults to false -->
			<daos>true</daos>

			<!-- Annotate POJOs and Records with JPA annotations for increased compatibility 
				and better integration with JPA/Hibernate, etc Defaults to false -->
			<jpaAnnotations>false</jpaAnnotations>

			<!-- Annotate POJOs and Records with JSR-303 validation annotations Defaults 
				to false -->
			<validationAnnotations>false</validationAnnotations>
		</generate>

		<target>
			<!-- The destination package of your generated classes (within the destination 
				directory) -->
			<packageName>br.com.pintos.jooq</packageName>

			<!-- The destination directory of your generated classes -->
			<directory>src</directory>
		</target>
	</generator>
</configuration>